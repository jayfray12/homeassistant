blueprint:
  name: Holiday Lighting Schedule (Sunset & Optional Lights)
  description: Change light colors between two dates at sunset and reset afterward. Works with 1â€“3 lights.
  domain: automation
  input:
    light_1:
      name: Light 1 (e.g. Red)
      default: ''
      selector:
        entity:
          domain: light
          multiple: false
    light_1_color:
      name: Light 1 RGB Color
      default: [255, 0, 0]
      selector:
        color_rgb: {}

    light_2:
      name: Light 2 (e.g. White)
      default: ''
      selector:
        entity:
          domain: light
          multiple: false
    light_2_color:
      name: Light 2 RGB Color
      default: [255, 255, 255]
      selector:
        color_rgb: {}

    light_3:
      name: Light 3 (e.g. Blue)
      default: ''
      selector:
        entity:
          domain: light
          multiple: false
    light_3_color:
      name: Light 3 RGB Color
      default: [0, 0, 255]
      selector:
        color_rgb: {}

    start_month_day:
      name: Start Month/Day (MM-DD)
      description: 'The month and day to start the holiday lights each year (e.g., 11-30 for Nov 30).'
      selector:
        text: {}

    end_month_day:
      name: End Month/Day (MM-DD)
      description: 'The month and day to end the holiday lights each year (e.g., 01-03 for Jan 3).'
      selector:
        text: {}

    reset_color_temp:
      name: Reset Color Temperature (mireds)
      default: 300
      selector:
        number:
          min: 150
          max: 500
          unit_of_measurement: mireds

    sunset_offset:
      name: Sunset Offset (HH:MM:SS)
      description: 'Offset from sunset for the primary trigger. E.g., +00:15:00 for 15 mins after sunset.'
      default: '+00:00:00'
      selector:
        text: {}

    enable_light_on_trigger:
      name: Enable Light On Trigger
      description: 'If enabled, the automation will also trigger when any of the selected lights turn on, to ensure colors are applied.'
      default: true
      selector:
        boolean: {}

    brightness_pct:
      name: Holiday Brightness (%)
      description: 'Brightness percentage for holiday colors (1-100).'
      default: 100
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: '%'
          mode: slider

    reset_brightness_pct:
      name: Reset Brightness (%)
      description: 'Brightness percentage for reset color (1-100).'
      default: 100
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: '%'
          mode: slider

trigger:
  - platform: sun
    event: sunset
    offset: !input sunset_offset

  - platform: state
    entity_id: 
      - !input light_1
      - !input light_2
      - !input light_3
    from: ['off', 'unavailable']
    to: "on"
    enabled: "{{ inputs.enable_light_on_trigger }}"

condition:
  - condition: or
    conditions:
      - condition: template
        value_template: >
          {% set start_md = inputs.start_month_day %}
          {% set end_md = inputs.end_month_day %}

          {% set start_month = start_md.split('-')[0] | int %}
          {% set start_day = start_md.split('-')[1] | int %}
          {% set end_month = end_md.split('-')[0] | int %}
          {% set end_day = end_md.split('-')[1] | int %}

          {% set current_month = now().month %}
          {% set current_day = now().day %}

          {# Handle cases where the period spans across year end (e.g., Dec 15 to Jan 5) #}
          {% if start_month > end_month %}
            {# Period spans year end, e.g., Nov to Jan #}
            {{ (current_month > start_month or (current_month == start_month and current_day >= start_day)) or
               (current_month < end_month or (current_month == end_month and current_day <= end_day)) }}
          {% elif start_month == end_month %}
            {# Period within the same month #}
            {{ current_month == start_month and current_day >= start_day and current_day <= end_day }}
          {% else %}
            {# Period within the same year, normal range #}
            {{ (current_month > start_month or (current_month == start_month and current_day >= start_day)) and
               (current_month < end_month or (current_month == end_month and current_day <= end_day)) }}
          {% endif %}

      - condition: template
        value_template: >
          {% set end_month = inputs.end_month_day.split('-')[0] | int %}
          {% set end_day = inputs.end_month_day.split('-')[1] | int %}

          {% set next_day = (now() + timedelta(days=1)) %}
          {% set next_day_month = next_day.month %}
          {% set next_day_day = next_day.day %}

          {{ next_day_month == end_month and next_day_day == end_day }}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: >
              {% set start_md = inputs.start_month_day %}
              {% set end_md = inputs.end_month_day %}

              {% set start_month = start_md.split('-')[0] | int %}
              {% set start_day = start_md.split('-')[1] | int %}
              {% set end_month = end_md.split('-')[0] | int %}
              {% set end_day = end_md.split('-')[1] | int %}

              {% set current_month = now().month %}
              {% set current_day = now().day %}

              {% if start_month > end_month %}
                {{ (current_month > start_month or (current_month == start_month and current_day >= start_day)) or
                   (current_month < end_month or (current_month == end_month and current_day <= end_day)) }}
              {% elif start_month == end_month %}
                {{ current_month == start_month and current_day >= start_day and current_day <= end_day }}
              {% else %}
                {{ (current_month > start_month or (current_month == start_month and current_day >= start_day)) and
                   (current_month < end_month or (current_month == end_month and current_day <= end_day)) }}
              {% endif %}
        sequence:
          - if: "{{ inputs.light_1 != '' }}"
            then:
              - service: light.turn_on
                target:
                  entity_id: !input light_1
                data:
                  rgb_color: !input light_1_color
                  brightness_pct: !input brightness_pct

          - if: "{{ inputs.light_2 != '' }}"
            then:
              - service: light.turn_on
                target:
                  entity_id: !input light_2
                data:
                  rgb_color: !input light_2_color
                  brightness_pct: !input brightness_pct

          - if: "{{ inputs.light_3 != '' }}"
            then:
              - service: light.turn_on
                target:
                  entity_id: !input light_3
                data:
                  rgb_color: !input light_3_color
                  brightness_pct: !input brightness_pct

      - conditions:
          - condition: template
            value_template: >
              {% set end_month = inputs.end_month_day.split('-')[0] | int %}
              {% set end_day = inputs.end_month_day.split('-')[1] | int %}

              {% set next_day = (now() + timedelta(days=1)) %}
              {% set next_day_month = next_day.month %}
              {% set next_day_day = next_day.day %}

              {{ next_day_month == end_month and next_day_day == end_day }}
        sequence:
          - if: "{{ inputs.light_1 != '' }}"
            then:
              - service: light.turn_on
                target:
                  entity_id: !input light_1
                data:
                  color_temp: !input reset_color_temp
                  brightness_pct: !input reset_brightness_pct

          - if: "{{ inputs.light_2 != '' }}"
            then:
              - service: light.turn_on
                target:
                  entity_id: !input light_2
                data:
                  color_temp: !input reset_color_temp
                  brightness_pct: !input reset_brightness_pct

          - if: "{{ inputs.light_3 != '' }}"
            then:
              - service: light.turn_on
                target:
                  entity_id: !input light_3
                data:
                  color_temp: !input reset_color_temp
                  brightness_pct: !input reset_brightness_pct
mode: single
